{"version":3,"sources":["content/SwitchLocalePage sync /^/.//.*$","content/PromptPage sync /^/.//.*$","components/Code.js","pages/Home.js","pages/Setup.js","pages/Translations.js","pages/SwitchLocale.js","components/Diff.js","pages/UsingPrompts.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Code","props","useState","show","setVisibility","style","marginRight","marginTop","width","textAlign","isSize","onClick","fontSize","language","prism","children","readMoreLink","href","target","rel","readMoreText","Home","AddingTina","SyntaxHighlighter","registerLanguage","jsx","Translations","useForm","label","initialValues","header","text","fields","name","component","onSubmit","data","form","alert","console","clear","log","formData","usePlugin","useTranslation","paragraph","t","className","SwitchLocale","i18n","useI18n","content","currentLocale","locale","require","localeToString","error","warn","fallbackData","getFormateLocale","Diff","diff","Forms","hasContent","useLocalePromptPlugin","onNo","setLocale","region","NavItem","exact","to","activeStyle","fontWeight","color","App","cms","useCMS","process","ApiOptions","localeList","basename","marginBottom","paddingLeft","paddingRight","maxWidth","Button","toggle","path","withI18n","Setup","UsingPrompts","TinaCMS","sidebar","position","enabled","toolbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7a5e92d.chunk.js","sourcesContent":["var map = {\n\t\"./en_ca\": 94,\n\t\"./en_ca.json\": 94,\n\t\"./fr_ca\": 156,\n\t\"./fr_ca.json\": 156\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 427;","var map = {\n\t\"./en_ca\": 95,\n\t\"./en_ca.json\": 95,\n\t\"./fr_ca\": 157,\n\t\"./fr_ca.json\": 157\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 428;","import React, { useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport prism from 'react-syntax-highlighter/dist/esm/styles/prism/prism';\n\nimport { Button } from 'bloomer';\n\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\nexport default function Code(props) {\n  const [show, setVisibility] = useState(true);\n  return (\n    <div style={{ marginRight: 60, marginTop: 40 }}>\n      <div style={{ width: '100%', textAlign: 'right' }}>\n        <Button isSize=\"small\" onClick={() => setVisibility(!show)}>\n          {show ? 'Hide Code' : 'Show Code'}\n        </Button>\n      </div>\n      {show && (\n        <div style={{ width: '100%', fontSize: 14 }}>\n          <SyntaxHighlighter language=\"jsx\" style={prism}>\n            {props.children}\n          </SyntaxHighlighter>\n        </div>\n      )}\n      {show && props.readMoreLink && (\n        <a href={props.readMoreLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          {props.readMoreText}\n        </a>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport Code from '../components/Code.js';\n\nexport default function Home() {\n  let code = `return (\n    <>\n      <p>\n        Hi! lets get started with learning how to add localization to a tinacms\n        site.\n      </p>\n      <p>\n        This guide assume you have a basic understanding of tina if you don't{' '}\n        <a href=\"https://tinacms.org/docs\">\n          head over to our website and check them out!\n        </a>\n      </p>\n    </>\n  );`;\n\n  return (\n    <>\n      <p>\n        Hi! lets get started with learning how to add localization to a tinacms\n        site.\n      </p>\n      <p>\n        To get started you can open the sidebar (pencil icon at the bottom of\n        the screen)\n      </p>\n      <p>\n        Note: This guide assume you have a basic understanding of tina if you\n        don't{' '}\n        <a href=\"https://tinacms.org/docs\">\n          head over to our website and check them out!\n        </a>\n      </p>\n\n      <Code>{code}</Code>\n    </>\n  );\n}\n","import React from 'react';\nimport Code from '../components/Code.js';\n// import { useSetupI18 } from '@tinalabs/react-tinacms-localization';\n\nexport default function AddingTina() {\n  let code = `\n  import { withI18n } from '@tinalabs/react-tinacms-localization';\n\n  const AppWrapper = withI18n(App, {\n    ApiOptions: {\n      localeList: [\n        { language: 'en', region: 'ca' },\n        { language: 'fr', region: 'ca' },\n        { language: 'en', region: 'us' },\n        { language: 'sp', region: 'us' },\n      ],\n    },\n  });\n  export default () => {\n    const cms = new TinaCMS({\n      sidebar: {\n        position: 'displace',\n      },\n      enabled: true,\n      toolbar: true,\n    });\n    return (\n      <TinaProvider cms={cms}>\n        <AppWrapper />\n      </TinaProvider>\n    );\n  };\n `;\n\n  return (\n    <>\n      <p>First we need to set up the plugin</p>\n      <p>\n        We could put all the bits and pieces together ourself or we can use a\n        helper function\n      </p>\n      <p>This helper function</p>\n      <ol>\n        <li>registers the localization api</li>\n        <li>registers the locale picker toolbar plugin</li>\n        <li>\n          wraps out app in a provides that we can accesses with a useI18n hook\n        </li>\n      </ol>\n      <p>\n        Now you will have access to a locale selection dropdown in the toolbar\n      </p>\n\n      <Code\n        readMoreLink=\"https://tinacms.org/docs/cms\"\n        readMoreText=\"Read the docs\"\n      >\n        {code}\n      </Code>\n    </>\n  );\n}\n","import { useTranslation } from '@tinalabs/react-tinacms-localization';\nimport React from 'react';\nimport { useForm, usePlugin } from 'tinacms';\n\nimport Code from '../components/Code.js';\n\nexport default function Translations() {\n  const fallbackData = {\n    header: 'The is a fallback title',\n    text: 'This is some fallback text',\n    paragraph:\n      'Since there is no paragraph defined on our content this fallback data will be shown. If you open the toolbar and edit the paragraph field you will override this fallback data',\n  };\n  const content = {\n    header: 'Making translations in our app',\n    text:\n      'First we should make a form to make out content editable. Once we have that data in a form we can use the useTranslation hook. We pass the form data to that hook and the fallback data. The fallback data will be displayed if the data we are trying to access is missing ot undefined. If you head into the sidebar you can see all of this in action',\n  };\n  const [formData, form] = useForm({\n    id: 'edit',\n    label: 'Edit',\n\n    initialValues: {\n      ...content,\n    },\n\n    fields: [\n      {\n        name: 'header',\n        label: 'Heading',\n        component: 'text',\n      },\n      {\n        name: 'text',\n        label: 'Text',\n        component: 'textarea',\n      },\n      {\n        name: 'paragraph',\n        label: 'Paragraph',\n        component: 'textarea',\n      },\n    ],\n\n    onSubmit(data, form) {\n      alert('Form submitted! Check the console to see the form values.');\n      console.clear();\n      console.log(data);\n    },\n  });\n\n  usePlugin(form);\n  const [t] = useTranslation(formData, fallbackData);\n\n  let code = `export default function Translations() {\n    const fallbackData = {\n      header: 'The is a fallback title',\n      text: 'This is some fallback text',\n      paragraph:\n        'Since there is no paragraph defined on our content this fallback data will be shown. If you open the toolbar and edit the paragraph field you will override this fallback data',\n    };\n    const content = {\n      header: 'Making translations in our app',\n      text:\n        'First we should make a form to make out content editable. Once we have that data in a form we can use the useTranslation hook. We pass the form data to that hook and the fallback data. The fallback data will be displayed if the data we are trying to access is missing ot undefined. If you head into the sidebar you can see all of this in action',\n    };\n    const [formData, form] = useForm({\n      id: 'edit',\n      label: 'Edit',\n  \n      initialValues: {\n        ...content,\n      },\n  \n      fields: [\n        {\n          name: 'header',\n          label: 'Heading',\n          component: 'text',\n        },\n        {\n          name: 'text',\n          label: 'Text',\n          component: 'textarea',\n        },\n        {\n          name: 'paragraph',\n          label: 'Paragraph',\n          component: 'textarea',\n        },\n      ],\n  \n      onSubmit(data, form) {\n        alert('Form submitted! Check the console to see the form values.');\n        console.clear();\n        console.log(data);\n      },\n    });\n  \n    usePlugin(form);\n    const [t] = useTranslation(formData, fallbackData);\n  \n  \n    return (\n      <>\n        <h1>{t('header')}</h1>\n        <p>{t('text')}</p>\n        <p>{t('paragraph')}</p\n      </>\n    );\n  }\n  `;\n\n  return (\n    <>\n      <h1 className=\"title is-3\">{t('header')}</h1>\n      <p>{t('text')}</p>\n      <p>{t('paragraph')}</p>\n\n      <Code\n        readMoreLink=\"https://tinacms.org/docs/forms\"\n        readMoreText=\"Read the docs\"\n      >\n        {code}\n      </Code>\n    </>\n  );\n}\n","import { useI18n, useTranslation } from '@tinalabs/react-tinacms-localization';\nimport React from 'react';\nimport { useForm, usePlugin } from 'tinacms';\n\nimport Code from '../components/Code.js';\n\nexport default function SwitchLocale() {\n  const i18n = useI18n();\n\n  // get the content\n  let content = {};\n  const currentLocale = i18n.locale;\n  try {\n    content = require(`../content/SwitchLocalePage/${i18n.localeToString(\n      currentLocale\n    )}`);\n  } catch (error) {\n    console.log('no locale exists');\n    console.warn(error);\n  }\n  // define fallback data\n  const fallbackData = require('../content/SwitchLocalePage/en_ca.json');\n\n  // setup a form\n  const [formData, form] = useForm({\n    id: `edit-${i18n.localeToString(currentLocale)}`,\n    label: `Edit form in ${i18n.getFormateLocale()}`,\n    initialValues: {\n      ...content,\n    },\n\n    fields: [\n      {\n        name: 'header',\n        label: 'Heading',\n        component: 'text',\n      },\n      {\n        name: 'text',\n        label: 'Text',\n        component: 'textarea',\n      },\n      {\n        name: 'paragraph',\n        label: 'Paragraph',\n        component: 'textarea',\n      },\n    ],\n\n    onSubmit(data, form) {\n      alert('Form submitted! Check the console to see the form values.');\n      console.clear();\n      console.log(data);\n    },\n  });\n  // register the form\n  usePlugin(form);\n  const [t] = useTranslation(formData, fallbackData);\n\n  let code = `\nimport { useI18n, useTranslation } from '@tinalabs/react-tinacms-localization';\nimport React from 'react';\nimport { useForm, usePlugin } from 'tinacms';\n\n\nexport default function SwitchLocale() {\n  const i18n = useI18n();\n\n  // get the content\n  let content = {};\n  const currentLocale = i18n.locale;\n  try {\n    content = require(\\`../content/${i18n.localeToString(currentLocale)}\\`);\n  } catch (error) {\n    console.log('no locale exists');\n    console.warn(error);\n  }\n  // define fallback data\n  const fallbackData = require('../content/en_ca.json');\n\n  // setup a form\n  const [formData, form] = useForm({\n    id: \\`edit-${i18n.localeToString(currentLocale)}\\`,\n    label: \\`Edit form in ${i18n.getFormateLocale()}\\`,\n    initialValues: {\n      ...content,\n    },\n\n    fields: [\n      {\n        name: 'header',\n        label: 'Heading',\n        component: 'text',\n      },\n      {\n        name: 'text',\n        label: 'Text',\n        component: 'textarea',\n      },\n      {\n        name: 'paragraph',\n        label: 'Paragraph',\n        component: 'textarea',\n      },\n    ],\n\n    onSubmit(data, form) {\n      alert('Form submitted! Check the console to see the form values.');\n      console.clear();\n      console.log(data);\n    },\n  });\n  // register the form\n  usePlugin(form);\n  const [t] = useTranslation(formData, fallbackData);\n\n  return (\n    <>\n      <h1 className=\"title is-3\">{t('header')}</h1>\n      <p>{t('text')}</p>\n      <p>{t('paragraph')}</p>\n\n      <Code\n        readMoreLink=\"https://tinacms.org/docs/forms\"\n        readMoreText=\"Read the docs\"\n      >\n        {code}\n      </Code>\n    </>\n  );\n}\n  `;\n\n  return (\n    <>\n      <h1 className=\"title is-3\">{t('header')}</h1>\n      <p>{t('text')}</p>\n      <p>{t('paragraph')}</p>\n\n      <Code\n        readMoreLink=\"https://tinacms.org/docs/forms\"\n        readMoreText=\"Read the docs\"\n      >\n        {code}\n      </Code>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport diff from 'react-syntax-highlighter/dist/esm/languages/prism/diff';\n\nimport { Button } from 'bloomer';\n\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\nexport default function Diff(props) {\n  const [show, setVisibility] = useState(true);\n  return (\n    <div style={{ marginRight: 60, marginTop: 40 }}>\n      <div style={{ width: '100%', textAlign: 'right' }}>\n        <Button isSize=\"small\" onClick={() => setVisibility(!show)}>\n          {show ? 'Hide Code' : 'Show Code'}\n        </Button>\n      </div>\n      {show && (\n        <div style={{ width: '100%', fontSize: 14 }}>\n          <SyntaxHighlighter language=\"diff\" style={diff}>\n            {props.children}\n          </SyntaxHighlighter>\n        </div>\n      )}\n      {show && props.readMoreLink && (\n        <a href={props.readMoreLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          {props.readMoreText}\n        </a>\n      )}\n    </div>\n  );\n}\n","import {\n  useI18n,\n  useLocalePromptPlugin,\n  useTranslation,\n} from '@tinalabs/react-tinacms-localization';\nimport React from 'react';\nimport { useForm, usePlugin } from 'tinacms';\n\nimport Code from '../components/Diff.js';\n\nexport default function Forms() {\n  const i18n = useI18n();\n  let hasContent = true;\n\n  // get the content\n  let content = {};\n  const currentLocale = i18n.locale;\n  try {\n    content = require(`../content/PromptPage/${i18n.localeToString(\n      currentLocale\n    )}`);\n  } catch (error) {\n    hasContent = false;\n    console.log('no locale exists');\n    console.warn(error);\n  }\n\n  // define fallback data\n  const fallbackData = require('../content/PromptPage/en_ca.json');\n\n  // setup a form\n  const [formData, form] = useForm({\n    id: `edit-${i18n.localeToString(currentLocale)}`,\n    label: `Edit form in ${i18n.getFormateLocale()}`,\n    initialValues: {\n      ...content,\n    },\n\n    fields: [\n      {\n        name: 'header',\n        label: 'Heading',\n        component: 'text',\n      },\n      {\n        name: 'text',\n        label: 'Text',\n        component: 'textarea',\n      },\n      {\n        name: 'paragraph',\n        label: 'Paragraph',\n        component: 'textarea',\n      },\n    ],\n\n    onSubmit(data, form) {\n      alert('Form submitted! Check the console to see the form values.');\n      console.clear();\n      console.log(data);\n    },\n  });\n  // register the form\n  usePlugin(form);\n  const [t] = useTranslation(formData, fallbackData);\n\n  useLocalePromptPlugin(!hasContent, {\n    onNo: () => {\n      i18n.setLocale({\n        language: 'en',\n        region: 'ca',\n      });\n    },\n  });\n\n  let code = `import {\n    useI18n,\n+   useLocalePromptPlugin,\n    useTranslation,\n  } from '@tinalabs/react-tinacms-localization';\n  import React from 'react';\n  import { useForm, usePlugin } from 'tinacms';\n  \n  \n  export default function Forms() {\n    const i18n = useI18n();\n+   let hasContent = true;\n  \n    // get the content\n    let content = {};\n    const currentLocale = i18n.locale;\n    try {\n      content = require(\\`../content/PromptPage/\\${i18n.localeToString(\n        currentLocale\n      )}\\`);\n    } catch (error) {\n+     hasContent = false;\n      console.log('no locale exists');\n      console.warn(error);\n    }\n  \n    // define fallback data\n    const fallbackData = require('../content/PromptPage/en_ca.json');\n  \n    // setup a form\n    const [formData, form] = useForm({\n      id: \\`edit-\\${i18n.localeToString(currentLocale)}\\`,\n      label: \\`Edit form in \\${i18n.getFormateLocale()}\\`,\n      initialValues: {\n        ...content,\n      },\n  \n      fields: [\n        {\n          name: 'header',\n          label: 'Heading',\n          component: 'text',\n        },\n        {\n          name: 'text',\n          label: 'Text',\n          component: 'textarea',\n        },\n        {\n          name: 'paragraph',\n          label: 'Paragraph',\n          component: 'textarea',\n        },\n      ],\n  \n      onSubmit(data, form) {\n        alert('Form submitted! Check the console to see the form values.');\n        console.clear();\n        console.log(data);\n      },\n    });\n    // register the form\n    usePlugin(form);\n    const [t] = useTranslation(formData, fallbackData);\n  \n+   useLocalePromptPlugin(!hasContent, {\n+     onNo: () => {\n+       i18n.setLocale({\n+         language: 'en',\n+         region: 'ca',\n+       });\n+     },\n+   });\n  \n    return (\n      <>\n        <h1 className=\"title is-1\">{t('header')}</h1>\n        <p>{t('text')}</p>\n        <p>{t('paragraph')}</p>\n      </>\n    );\n  }\n  `;\n  return (\n    <>\n      <h1 className=\"title is-1\">{t('header')}</h1>\n      <p>{t('text')}</p>\n      <p>{t('paragraph')}</p>\n\n      <Code\n        readMoreLink=\"https://tinacms.org/docs/forms\"\n        readMoreText=\"Read the docs\"\n      >\n        {code}\n      </Code>\n    </>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function NavItem(props) {\n  return (\n    <>\n      <NavLink\n        exact\n        to={props.to}\n        activeStyle={{\n          fontWeight: 'bold',\n          color: 'hsl(0, 0%, 21%)',\n        }}\n      >\n        {props.children}\n      </NavLink>\n    </>\n  );\n}\n","import React from 'react';\n\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport { TinaCMS, TinaProvider, useCMS } from 'tinacms';\n\nimport Home from './pages/Home.js';\nimport Setup from './pages/Setup.js';\nimport Translations from './pages/Translations.js';\nimport SwitchLocale from './pages/SwitchLocale';\nimport UsingPrompts from './pages/UsingPrompts';\n\nimport NavItem from './components/Nav.js';\nimport { Container, Columns, Column } from 'bloomer';\nimport { PromptProvider, withI18n } from '@tinalabs/react-tinacms-localization';\nimport { Button } from 'bloomer/lib/elements/Button';\n\nconst App = () => {\n  const cms = useCMS();\n  console.log(process.env.REACT_APP_BASE_URL);\n\n  const ApiOptions = {\n    localeList: [\n      { language: 'en', region: 'ca' },\n      { language: 'fr', region: 'ca' },\n      { language: 'en', region: 'us' },\n      { language: 'sp', region: 'us' },\n    ],\n  };\n\n  return (\n    <Router basename={process.env.REACT_APP_BASE_URL || ''}>\n      <Container\n        style={{\n          marginTop: 40,\n          marginBottom: 40,\n          paddingLeft: 40,\n          paddingRight: 40,\n          maxWidth: 1000,\n        }}\n      >\n        <Columns>\n          <Column isSize=\"3/4\">\n            <h1 className=\"title is-1\">\n              <Link to=\"/\" className=\"has-text-black\">\n                TinaCMS i18n Example test\n              </Link>\n            </h1>\n            <Button onClick={cms.toggle}>Toggle edit mode</Button>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route\n                path=\"/setup\"\n                component={withI18n(Setup, { ApiOptions })}\n              />\n              <Route\n                path=\"/translations\"\n                component={withI18n(Translations, { ApiOptions })}\n              />\n              <Route\n                path=\"/switch-locale\"\n                component={withI18n(SwitchLocale, { ApiOptions })}\n              />\n              <Route\n                path=\"/using-prompts\"\n                component={withI18n(UsingPrompts, { ApiOptions })}\n              />\n            </Switch>\n          </Column>\n\n          <Column isSize=\"1/4\">\n            <ol style={{ marginTop: 20 }}>\n              <NavItem to=\"/\">\n                <li>Welcome</li>\n              </NavItem>\n              <NavItem to=\"/setup\">\n                <li>Register the Api</li>\n              </NavItem>\n              <NavItem to=\"/translations\">\n                <li>MakeTranslations</li>\n              </NavItem>\n              <NavItem to=\"/switch-locale\">\n                <li>Switch locale</li>\n              </NavItem>\n              <NavItem to=\"/using-prompts\">\n                <li>Using Prompts</li>\n              </NavItem>\n            </ol>\n          </Column>\n        </Columns>\n      </Container>\n    </Router>\n  );\n};\n\nexport default () => {\n  const cms = new TinaCMS({\n    sidebar: {\n      position: 'displace',\n    },\n    enabled: true,\n    toolbar: true,\n  });\n  return (\n    <TinaProvider cms={cms}>\n      <PromptProvider>\n        <App />\n      </PromptProvider>\n    </TinaProvider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// const cms = new TinaCMS({});\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}